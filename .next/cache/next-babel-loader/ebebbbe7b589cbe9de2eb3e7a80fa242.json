{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const onDragEnd = (result, columns, setColumns) => {\n  if (!result.destination) return;\n  const {\n    source,\n    destination\n  } = result;\n\n  if (source.droppableId !== destination.droppableId) {\n    const sourceColumn = columns[source.droppableId];\n    const destColumn = columns[destination.droppableId];\n    const sourceItems = [...sourceColumn.items];\n    const destItems = [...destColumn.items];\n    const [removed] = sourceItems.splice(source.index, 1);\n    destItems.splice(destination.index, 0, removed);\n    setColumns(_objectSpread(_objectSpread({}, columns), {}, {\n      [source.droppableId]: _objectSpread(_objectSpread({}, sourceColumn), {}, {\n        items: sourceItems\n      }),\n      [destination.droppableId]: _objectSpread(_objectSpread({}, destColumn), {}, {\n        items: destItems\n      })\n    }));\n  } else {\n    const column = columns[source.droppableId];\n    const copiedItems = [...column.items];\n    const [removed] = copiedItems.splice(source.index, 1);\n    copiedItems.splice(destination.index, 0, removed);\n    setColumns(_objectSpread(_objectSpread({}, columns), {}, {\n      [source.droppableId]: _objectSpread(_objectSpread({}, column), {}, {\n        items: copiedItems\n      })\n    }));\n  }\n};","map":{"version":3,"sources":["/Users/tejasbaid/Desktop/Projects/Web Projects/thullo/thullo-client/Helpers/KanbanHelper.js"],"names":["onDragEnd","result","columns","setColumns","destination","source","droppableId","sourceColumn","destColumn","sourceItems","items","destItems","removed","splice","index","column","copiedItems"],"mappings":";;;;;;AACA,OAAO,MAAMA,SAAS,GAAG,CAACC,MAAD,EAASC,OAAT,EAAkBC,UAAlB,KAAiC;AACtD,MAAI,CAACF,MAAM,CAACG,WAAZ,EAAyB;AACzB,QAAM;AAAEC,IAAAA,MAAF;AAAUD,IAAAA;AAAV,MAA0BH,MAAhC;;AAEA,MAAII,MAAM,CAACC,WAAP,KAAuBF,WAAW,CAACE,WAAvC,EAAoD;AAChD,UAAMC,YAAY,GAAGL,OAAO,CAACG,MAAM,CAACC,WAAR,CAA5B;AACA,UAAME,UAAU,GAAGN,OAAO,CAACE,WAAW,CAACE,WAAb,CAA1B;AACA,UAAMG,WAAW,GAAG,CAAC,GAAGF,YAAY,CAACG,KAAjB,CAApB;AACA,UAAMC,SAAS,GAAG,CAAC,GAAGH,UAAU,CAACE,KAAf,CAAlB;AACA,UAAM,CAACE,OAAD,IAAYH,WAAW,CAACI,MAAZ,CAAmBR,MAAM,CAACS,KAA1B,EAAiC,CAAjC,CAAlB;AACAH,IAAAA,SAAS,CAACE,MAAV,CAAiBT,WAAW,CAACU,KAA7B,EAAoC,CAApC,EAAuCF,OAAvC;AACAT,IAAAA,UAAU,iCACHD,OADG;AAEN,OAACG,MAAM,CAACC,WAAR,mCACOC,YADP;AAEIG,QAAAA,KAAK,EAAED;AAFX,QAFM;AAMN,OAACL,WAAW,CAACE,WAAb,mCACOE,UADP;AAEIE,QAAAA,KAAK,EAAEC;AAFX;AANM,OAAV;AAWH,GAlBD,MAkBO;AACH,UAAMI,MAAM,GAAGb,OAAO,CAACG,MAAM,CAACC,WAAR,CAAtB;AACA,UAAMU,WAAW,GAAG,CAAC,GAAGD,MAAM,CAACL,KAAX,CAApB;AACA,UAAM,CAACE,OAAD,IAAYI,WAAW,CAACH,MAAZ,CAAmBR,MAAM,CAACS,KAA1B,EAAiC,CAAjC,CAAlB;AACAE,IAAAA,WAAW,CAACH,MAAZ,CAAmBT,WAAW,CAACU,KAA/B,EAAsC,CAAtC,EAAyCF,OAAzC;AACAT,IAAAA,UAAU,iCACHD,OADG;AAEN,OAACG,MAAM,CAACC,WAAR,mCACOS,MADP;AAEIL,QAAAA,KAAK,EAAEM;AAFX;AAFM,OAAV;AAOH;AACJ,CAnCM","sourcesContent":["\nexport const onDragEnd = (result, columns, setColumns) => {\n    if (!result.destination) return;\n    const { source, destination } = result;\n\n    if (source.droppableId !== destination.droppableId) {\n        const sourceColumn = columns[source.droppableId];\n        const destColumn = columns[destination.droppableId];\n        const sourceItems = [...sourceColumn.items];\n        const destItems = [...destColumn.items];\n        const [removed] = sourceItems.splice(source.index, 1);\n        destItems.splice(destination.index, 0, removed);\n        setColumns({\n            ...columns,\n            [source.droppableId]: {\n                ...sourceColumn,\n                items: sourceItems\n            },\n            [destination.droppableId]: {\n                ...destColumn,\n                items: destItems\n            }\n        });\n    } else {\n        const column = columns[source.droppableId];\n        const copiedItems = [...column.items];\n        const [removed] = copiedItems.splice(source.index, 1);\n        copiedItems.splice(destination.index, 0, removed);\n        setColumns({\n            ...columns,\n            [source.droppableId]: {\n                ...column,\n                items: copiedItems\n            }\n        });\n    }\n};"]},"metadata":{},"sourceType":"module"}